{"version":3,"sources":["recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setrecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"yQAsBeA,EAlBA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACrC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACI,6BAAKN,IACL,6CACA,6BACIG,EAAYI,KAAI,SAAAC,GAAU,OACvB,6BACKA,EAAWC,YAIvB,4CAAeR,KACf,qBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,SCiD1CC,EA5DH,WACV,IADgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,WAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAbf,WAae,oBAZd,qCAWG,cACXM,EADW,gBAGEA,EAASC,OAHX,OAGXC,EAHW,OAIjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MALA,2CAAH,qDAmBhB,OACE,sBAAKvB,UAAU,MAAf,UAEE,uBAAM0B,SATQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAMmBb,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa6B,KAAK,OAAOC,MAAOlB,EAAQmB,SAd3C,SAAAJ,GAClBd,EAAUc,EAAEK,OAAOF,UAcf,wBAAQ9B,UAAU,gBAAgB6B,KAAK,SAAvC,uBAGD,qBAAK7B,UAAU,UAAf,SACAU,EAAQP,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAEEN,MAAOM,EAAOA,OAAO+B,MACrBlC,YAAaG,EAAOA,OAAOH,YAC3BF,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,OAJhBI,EAAOA,OAAO+B,gBCrCdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.8e4a0d8e.chunk.js","sourcesContent":["import React from 'react';\r\nimport App from './App';\r\nimport style from './recipe.module.css'\r\n\r\nconst Recipe = ({title, calories, image, ingredients}) => {\r\n    return (\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <h2>Ingredients</h2>\r\n            <ol>\r\n               {ingredients.map(ingredient =>(\r\n                   <li>\r\n                       {ingredient.text}\r\n                   </li>\r\n               ))}\r\n            </ol>\r\n            <p>Calories : {calories}</p>\r\n            <img className={style.image} src={image} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe","import react, { useEffect, useState } from 'react';\nimport './App.css';\nimport Recipe from './recipe';\n\n\n\nconst App = () => {\n  const APP_ID = 'ed70d85c';\n  const APP_KEY = '7e8d3f2de232110f52c25ca2402c6dce'\n\n\n  const [recipes, setrecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken')\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setrecipes(data.hits);\n    console.log(data.hits);\n\n  };\n\n  const updatSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('')\n  }\n\n  return (\n    <div className='App'>\n\n      <form onSubmit={getSearch} className='search-form'>\n        <input className='search-bar' type=\"text\" value={search} onChange={updatSearch} />\n        <button className='search-button' type=\"submit\">search</button>\n      </form>\n       \n       <div className='recipes' >\n      {recipes.map(recipe => (\n        <Recipe\n          key={recipe.recipe.label}\n          title={recipe.recipe.label}\n          ingredients={recipe.recipe.ingredients}\n          calories={recipe.recipe.calories}\n          image={recipe.recipe.image} />\n      )\n     \n\n      )}\n      </div>\n\n    </div>\n  );\n};\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3Ytc-\",\"image\":\"recipe_image__3yyek\"};"],"sourceRoot":""}